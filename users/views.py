
from rest_framework import generics
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from knox.models import AuthToken
from .serializers import UserSerializer, RegisterSerializer
from rest_framework import permissions
from rest_framework.authtoken.serializers import AuthTokenSerializer
from knox.views import LoginView as KnoxLoginView
from django.contrib.auth import login
from rest_framework import status
from .serializers import ChangePasswordSerializer
from django.contrib.auth import get_user_model
from post_office import mail
import datetime
from django.core.mail import send_mail, EmailMessage

User= get_user_model()

# Register API
class RegisterAPI(generics.GenericAPIView):
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        mail.send(
            serializer.data['email'],
            'akisanyamobolaji@gmail.com',
            subject='Welcome to Ak√°≈ãÃçtBook.!',
            message=f"Welcome {serializer.data['full_name']}",
            html_message = 
                f"Dear {serializer.data['username'].upper()} <p>Welcome to your Ak√°≈ãÃçtBook account! üôå . You have just taken your business to the next stage by registering at Ak√°≈ãÃçtBook. Keeping up with your income and expenditure can be a struggle and our mission is to make it easier for you to manage your financial records.</p> <h3>You can start managing your invoices in three easy steps:</h3> <ol><li>Create your first customer/client</li> <li>Add your Product/Goods on sale.</li> <li>Create New transactions and send an Invoice generated by us to your customers.</li></ol> You can reach out to me on this email if you have any questions.",
            headers={'Reply-to': 'akisanyamobolaji@gmail.com'},
            priority='now',
        )
        return Response({
        "user": UserSerializer(user, context=self.get_serializer_context()).data,
        "token": AuthToken.objects.create(user)[1]
        })

class LoginAPI(KnoxLoginView):
    permission_classes = (permissions.AllowAny,)

    def post(self, request, format=None):
        serializer = AuthTokenSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        login(request, user)
        return super(LoginAPI, self).post(request, format=None)


class ChangePasswordView(generics.UpdateAPIView):
    """
    An endpoint for changing password.
    """
    serializer_class = ChangePasswordSerializer
    model = User
    permission_classes = (IsAuthenticated,)

    def get_object(self, queryset=None):
        obj = self.request.user
        return obj

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        serializer = self.get_serializer(data=request.data)

        if serializer.is_valid():
            # Check old password
            if not self.object.check_password(serializer.data.get("old_password")):
                return Response({"old_password": ["Wrong password."]}, status=status.HTTP_400_BAD_REQUEST)
            # set_password also hashes the password that the user will get
            self.object.set_password(serializer.data.get("new_password"))
            self.object.save()
            response = {
                'status': 'success',
                'code': status.HTTP_200_OK,
                'message': 'Password updated successfully',
                'data': []
            }
            return Response(response)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
